// <auto-generated/>
using System;
using System.Drawing;
using System.Diagnostics;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Runtime.Versioning;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;
using ObjCRuntime;

namespace AVFoundation;

[Register("AVAssetTrackTrackAssociation", true)]
public unsafe partial class AVAssetTrackTrackAssociation
{
	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static readonly NativeHandle class_ptr = Class.GetHandle ("AVAssetTrackTrackAssociation");

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Never)]
	[Export ("init")]
	public AVAssetTrackTrackAssociation () : base (NSObjectFlag.Empty)
	{
		if (IsDirectBinding)
		{
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSend (this.Handle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
		}
		else
		{
			InitializeHandle (global::ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper (this.SuperHandle, global::ObjCRuntime.Selector.GetHandle ("init")), "init");
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Never)]
	protected AVAssetTrackTrackAssociation (NSObjectFlag t) : base (t)
	{
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	[EditorBrowsable (EditorBrowsableState.Never)]
	protected internal AVAssetTrackTrackAssociation (NativeHandle handle) : base (handle)
	{
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static NSString? _DefaultDevice;

	[Field ("AVTrackAssociationTypeAudioFallback", "AVFoundation")]
	public partial static AVFoundation.AVCaptureDeviceType DefaultDevice
	{
		get
		{
			if (_DefaultDevice is null)
				_DefaultDevice = Dlfcn.GetStringConstant (Libraries.AVFoundation.Handle, "AVTrackAssociationTypeAudioFallback")!;
			return AVCaptureDeviceTypeExtensions.GetValue (_DefaultDevice);
		}
	}

	[BindingImpl (BindingImplOptions.GeneratedCode | BindingImplOptions.Optimizable)]
	static NSString? _DefaultDeviceReadWrite;

	[Field ("AVTrackAssociationTypeAudioFallbackReadWrite", "AVFoundation")]
	public partial static AVFoundation.AVCaptureDeviceType DefaultDeviceReadWrite
	{
		get
		{
			if (_DefaultDeviceReadWrite is null)
				_DefaultDeviceReadWrite = Dlfcn.GetStringConstant (Libraries.AVFoundation.Handle, "AVTrackAssociationTypeAudioFallbackReadWrite")!;
			return AVCaptureDeviceTypeExtensions.GetValue (_DefaultDeviceReadWrite);
		}
		set
		{
			Dlfcn.SetString (Libraries.AVFoundation.Handle, "AVTrackAssociationTypeAudioFallbackReadWrite", value.GetConstant ());
		}
	}
}
