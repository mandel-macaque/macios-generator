using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Xamarin.Macios.Generator.Tests;

public class SampleIncrementalSourceGeneratorTests : BaseTestClass
{
    /*
     * BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (NSAnimationDelegate) })]
       appkit.cs-      interface NSAnimation : NSCoding, NSCopying {
     */

    // [BaseType (typeof (NSObject), Delegates = new string [] { "WeakDelegate" }
    // [BaseType (typeof (AVAudioBuffer), Name = "AVAudioPCMBuffer")]
    // [BaseType (typeof (UIView), KeepRefUntil = "Dismissed", Delegates = new string [] { "WeakDelegate" }, Events = new Type [] { typeof (UIAlertViewDelegate) })]

    private const string BaseTypeAttributeOnlyTypeText = @"
using Foundation;
using ObjCRuntime;

namespace AVFoundation;

[BindingType]
public partial class AVAsynchronousVideoCompositionRequest
{
    [Export (""renderContext"", ArgumentSemantic.Copy)]
	public AVVideoCompositionRenderContext? RenderContext { get; }

    [Field (""AVMediaTypeVideo"")]
	public static partial NSString Video { get; }

    [Notification]
	[Field (""AVAudioEngineConfigurationChangeNotification"")]
	public NSString ConfigurationChangeNotification { get; }

    [Export (""sourceFrameByTrackID:"")]
    public partial CVPixelBuffer? SourceFrameByTrackID (int /* CMPersistentTrackID = int32_t */ trackID);
}

[BindingType]
enum AVCaptureDeviceType {

	[Field (""AVCaptureDeviceTypeBuiltInMicrophone"")]
	BuiltInMicrophone,

	[Field (""AVCaptureDeviceTypeBuiltInWideAngleCamera"")]
	BuiltInWideAngleCamera,

	[Field (""AVCaptureDeviceTypeBuiltInTelephotoCamera"")]
	BuiltInTelephotoCamera,

	[Field (""AVCaptureDeviceTypeBuiltInDuoCamera"")]
	BuiltInDuoCamera,

	[Field (""AVCaptureDeviceTypeBuiltInDualCamera"")]
	BuiltInDualCamera,

	[Field (""AVCaptureDeviceTypeBuiltInTrueDepthCamera"")]
	BuiltInTrueDepthCamera,

	[Field (""AVCaptureDeviceTypeBuiltInUltraWideCamera"")]
	BuiltInUltraWideCamera,

	[Field (""AVCaptureDeviceTypeBuiltInTripleCamera"")]
	BuiltInTripleCamera,

	[Field (""AVCaptureDeviceTypeBuiltInDualWideCamera"")]
	BuiltInDualWideCamera,

	[Field (""AVCaptureDeviceTypeExternalUnknown"")]
	ExternalUnknown,

	[Field (""AVCaptureDeviceTypeBuiltInLiDARDepthCamera"")]
	BuiltInLiDarDepthCamera,
}
";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

";

    // [BaseType (typeof (AVAudioBuffer), Name = "AVAudioPCMBuffer")]
    private const string BaseTypeAttributeTypeAndNameText = @"
namespace TestNamespace;

[BidingType (Name = ""AVAudioPCMBuffer"")]
interface AVAudioPcmBuffer : AVAudioBuffer {
}
";

    private const string BaseTypeAttributeTypeAndDelegates = @"
namespace TestNamespace;

[BaseType (typeof (NSObject), Delegates = new string [] { ""WeakDelegate"" }
interface ClassWithDelegates {
}
";

    private const string BaseTypeAttributeTypeAndEvents = @"
namespace TestNamespace;

interface SomeDelegate {
}

[BaseType (typeof (UIView), Events = new Type [] { typeof (SomeDelegate) })]
interface ClassWithEvents {
}
";

    [Theory]
    [InlineData("AVAsynchronousVideoCompositionRequest", BaseTypeAttributeOnlyTypeText, ExpectedGeneratedClassText)]
    //[InlineData("AVAudioPcmBuffer", BaseTypeAttributeTypeAndNameText, ExpectedGeneratedClassText)]
    //[InlineData("ClassWithDelegates", BaseTypeAttributeTypeAndDelegates, ExpectedGeneratedClassText)]
    //[InlineData("ClassWithEvents", BaseTypeAttributeTypeAndEvents, ExpectedGeneratedClassText)]
    public void BaseTypeAttributeTest(string className, string inputText, string outputText)
    {
        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(SampleIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(inputText) },
            _references);

        // Run generators and retrieve all results.
        var runResult = _driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith($"{className}.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(outputText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}
